// <auto-generated />
using System;
using EducationaInstitutionAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EducationaInstitutionAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EducationaInstitutionAPI.Data.EduInstitution", b =>
                {
                    b.Property<Guid>("EduInstitutionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LocationID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("EduInstitutionID");

                    b.HasIndex("LocationID", "Name", "Description", "EduInstitutionID");

                    b.HasIndex("Name", "Description", "LocationID", "BuildingID", "EduInstitutionID");

                    b.ToTable("EducationalInstitutions");
                });

            modelBuilder.Entity("EducationaInstitutionAPI.Data.Helpers.InstitutionAttended", b =>
                {
                    b.Property<Guid>("InstitutionAttendedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EducationalInstitutionEduInstitutionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProfessorIdentityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StudentIdentityID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InstitutionAttendedID");

                    b.HasIndex("EducationalInstitutionEduInstitutionID");

                    b.HasIndex("ProfessorIdentityID");

                    b.HasIndex("StudentIdentityID");

                    b.ToTable("InstitutionsAttended");
                });

            modelBuilder.Entity("EducationaInstitutionAPI.Data.Professor", b =>
                {
                    b.Property<Guid>("IdentityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EduInstitutionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OfficeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("IdentityID");

                    b.HasIndex("EduInstitutionID");

                    b.HasIndex("OfficeID");

                    b.HasIndex("IdentityID", "Rank", "OfficeID")
                        .IsUnique();

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("EducationaInstitutionAPI.Data.Staff", b =>
                {
                    b.Property<Guid>("IdentityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EducationalInstitutionEduInstitutionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("IdentityID");

                    b.HasIndex("EducationalInstitutionEduInstitutionID");

                    b.ToTable("Personnel");
                });

            modelBuilder.Entity("EducationaInstitutionAPI.Data.Student", b =>
                {
                    b.Property<Guid>("IdentityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentYear")
                        .HasColumnType("int");

                    b.Property<Guid?>("EduInstitutionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdentityID");

                    b.HasIndex("EduInstitutionID");

                    b.HasIndex("IdentityID", "CurrentYear")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EducationaInstitutionAPI.Data.EduInstitution", b =>
                {
                    b.OwnsOne("EducationaInstitutionAPI.Data.Accessibility", "Accessibility", b1 =>
                        {
                            b1.Property<Guid>("EduInstitutionID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsDisabled")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("ScheduledForPermanentDeletion")
                                .HasColumnType("datetime2");

                            b1.HasKey("EduInstitutionID");

                            b1.HasIndex("ScheduledForPermanentDeletion", "IsDisabled");

                            b1.ToTable("EducationalInstitutions");

                            b1.WithOwner()
                                .HasForeignKey("EduInstitutionID");
                        });

                    b.Navigation("Accessibility");
                });

            modelBuilder.Entity("EducationaInstitutionAPI.Data.Helpers.InstitutionAttended", b =>
                {
                    b.HasOne("EducationaInstitutionAPI.Data.EduInstitution", "EducationalInstitution")
                        .WithMany()
                        .HasForeignKey("EducationalInstitutionEduInstitutionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationaInstitutionAPI.Data.Professor", null)
                        .WithMany("InstitutionsAttended")
                        .HasForeignKey("ProfessorIdentityID");

                    b.HasOne("EducationaInstitutionAPI.Data.Student", null)
                        .WithMany("InstitutionsAttended")
                        .HasForeignKey("StudentIdentityID");

                    b.Navigation("EducationalInstitution");
                });

            modelBuilder.Entity("EducationaInstitutionAPI.Data.Professor", b =>
                {
                    b.HasOne("EducationaInstitutionAPI.Data.EduInstitution", null)
                        .WithMany("Professors")
                        .HasForeignKey("EduInstitutionID");

                    b.OwnsOne("EducationaInstitutionAPI.Data.Accessibility", "Accessibility", b1 =>
                        {
                            b1.Property<Guid>("ProfessorIdentityID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsDisabled")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("ScheduledForPermanentDeletion")
                                .HasColumnType("datetime2");

                            b1.HasKey("ProfessorIdentityID");

                            b1.HasIndex("ScheduledForPermanentDeletion", "IsDisabled");

                            b1.ToTable("Professors");

                            b1.WithOwner()
                                .HasForeignKey("ProfessorIdentityID");
                        });

                    b.Navigation("Accessibility");
                });

            modelBuilder.Entity("EducationaInstitutionAPI.Data.Staff", b =>
                {
                    b.HasOne("EducationaInstitutionAPI.Data.EduInstitution", "EducationalInstitution")
                        .WithMany("Personnel")
                        .HasForeignKey("EducationalInstitutionEduInstitutionID");

                    b.OwnsOne("EducationaInstitutionAPI.Data.Accessibility", "Accessibility", b1 =>
                        {
                            b1.Property<Guid>("StaffIdentityID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsDisabled")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("ScheduledForPermanentDeletion")
                                .HasColumnType("datetime2");

                            b1.HasKey("StaffIdentityID");

                            b1.HasIndex("ScheduledForPermanentDeletion", "IsDisabled");

                            b1.ToTable("Personnel");

                            b1.WithOwner()
                                .HasForeignKey("StaffIdentityID");
                        });

                    b.Navigation("Accessibility");

                    b.Navigation("EducationalInstitution");
                });

            modelBuilder.Entity("EducationaInstitutionAPI.Data.Student", b =>
                {
                    b.HasOne("EducationaInstitutionAPI.Data.EduInstitution", null)
                        .WithMany("Students")
                        .HasForeignKey("EduInstitutionID");

                    b.OwnsOne("EducationaInstitutionAPI.Data.Accessibility", "Accessibility", b1 =>
                        {
                            b1.Property<Guid>("StudentIdentityID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsDisabled")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("ScheduledForPermanentDeletion")
                                .HasColumnType("datetime2");

                            b1.HasKey("StudentIdentityID");

                            b1.HasIndex("ScheduledForPermanentDeletion", "IsDisabled");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentIdentityID");
                        });

                    b.Navigation("Accessibility");
                });

            modelBuilder.Entity("EducationaInstitutionAPI.Data.EduInstitution", b =>
                {
                    b.Navigation("Personnel");

                    b.Navigation("Professors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EducationaInstitutionAPI.Data.Professor", b =>
                {
                    b.Navigation("InstitutionsAttended");
                });

            modelBuilder.Entity("EducationaInstitutionAPI.Data.Student", b =>
                {
                    b.Navigation("InstitutionsAttended");
                });
#pragma warning restore 612, 618
        }
    }
}
