// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EducationalInstitution.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210508210615_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EducationalInstitutionAPI.Data.EducationalInstitution", b =>
                {
                    b.Property<Guid>("EducationalInstitutionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("ParentInstitutionEducationalInstitutionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EducationalInstitutionID");

                    b.HasIndex("ParentInstitutionEducationalInstitutionID");

                    b.HasIndex("LocationID", "EducationalInstitutionID");

                    b.ToTable("EducationalInstitutions");
                });

            modelBuilder.Entity("EducationalInstitutionAPI.Data.EducationalInstitutionAdmin", b =>
                {
                    b.Property<Guid>("Identity")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EducationalInstitutionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Identity", "EducationalInstitutionID");

                    b.HasIndex("EducationalInstitutionID");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("EducationalInstitutionAPI.Data.EducationalInstitutionBuilding", b =>
                {
                    b.Property<string>("BuildingID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("EducationalInstitutionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BuildingID", "EducationalInstitutionID");

                    b.HasIndex("EducationalInstitutionID");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("EducationalInstitutionAPI.Data.EducationalInstitution", b =>
                {
                    b.HasOne("EducationalInstitutionAPI.Data.EducationalInstitution", "ParentInstitution")
                        .WithMany("ChildInstitutions")
                        .HasForeignKey("ParentInstitutionEducationalInstitutionID");

                    b.OwnsOne("EducationalInstitutionAPI.Data.Helpers.Access", "EntityAccess", b1 =>
                        {
                            b1.Property<Guid>("EducationalInstitutionID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("DateForPermanentDeletion")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsDisabled")
                                .HasColumnType("bit");

                            b1.HasKey("EducationalInstitutionID");

                            b1.HasIndex("DateForPermanentDeletion", "IsDisabled");

                            b1.ToTable("EducationalInstitutions");

                            b1.WithOwner()
                                .HasForeignKey("EducationalInstitutionID");
                        });

                    b.Navigation("EntityAccess");

                    b.Navigation("ParentInstitution");
                });

            modelBuilder.Entity("EducationalInstitutionAPI.Data.EducationalInstitutionAdmin", b =>
                {
                    b.HasOne("EducationalInstitutionAPI.Data.EducationalInstitution", "EducationalInstitution")
                        .WithMany("Admins")
                        .HasForeignKey("EducationalInstitutionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EducationalInstitutionAPI.Data.Helpers.Access", "EntityAccess", b1 =>
                        {
                            b1.Property<Guid>("EducationalInstitutionAdminIdentity")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("EducationalInstitutionAdminEducationalInstitutionID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("DateForPermanentDeletion")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsDisabled")
                                .HasColumnType("bit");

                            b1.HasKey("EducationalInstitutionAdminIdentity", "EducationalInstitutionAdminEducationalInstitutionID");

                            b1.HasIndex("DateForPermanentDeletion", "IsDisabled");

                            b1.ToTable("Admins");

                            b1.WithOwner()
                                .HasForeignKey("EducationalInstitutionAdminIdentity", "EducationalInstitutionAdminEducationalInstitutionID");
                        });

                    b.Navigation("EducationalInstitution");

                    b.Navigation("EntityAccess");
                });

            modelBuilder.Entity("EducationalInstitutionAPI.Data.EducationalInstitutionBuilding", b =>
                {
                    b.HasOne("EducationalInstitutionAPI.Data.EducationalInstitution", "EducationalInstitution")
                        .WithMany("Buildings")
                        .HasForeignKey("EducationalInstitutionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EducationalInstitutionAPI.Data.Helpers.Access", "EntityAccess", b1 =>
                        {
                            b1.Property<string>("EducationalInstitutionBuildingBuildingID")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<Guid>("EducationalInstitutionBuildingEducationalInstitutionID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("DateForPermanentDeletion")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsDisabled")
                                .HasColumnType("bit");

                            b1.HasKey("EducationalInstitutionBuildingBuildingID", "EducationalInstitutionBuildingEducationalInstitutionID");

                            b1.HasIndex("DateForPermanentDeletion", "IsDisabled");

                            b1.ToTable("Buildings");

                            b1.WithOwner()
                                .HasForeignKey("EducationalInstitutionBuildingBuildingID", "EducationalInstitutionBuildingEducationalInstitutionID");
                        });

                    b.Navigation("EducationalInstitution");

                    b.Navigation("EntityAccess");
                });

            modelBuilder.Entity("EducationalInstitutionAPI.Data.EducationalInstitution", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Buildings");

                    b.Navigation("ChildInstitutions");
                });
#pragma warning restore 612, 618
        }
    }
}
