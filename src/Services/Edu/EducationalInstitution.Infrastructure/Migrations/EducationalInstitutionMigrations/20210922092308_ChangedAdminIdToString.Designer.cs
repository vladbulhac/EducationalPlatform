/*// <auto-generated />
using System;
using EducationalInstitution.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EducationalInstitution.Infrastructure.Migrations.EducationalInstitutionMigrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210922092308_ChangedAdminIdToString")]
    partial class ChangedAdminIdToString
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EducationalInstitution.Domain.Models.Aggregates.EducationalInstitution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EducationalInstitutionID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("ParentInstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentInstitutionId");

                    b.HasIndex("LocationID", "Id")
                        .IsUnique();

                    b.HasIndex("Name", "LocationID", "Id")
                        .IsUnique();

                    b.ToTable("EducationalInstitutions");
                });

            modelBuilder.Entity("EducationalInstitution.Domain.Models.EducationalInstitutionAdmin", b =>
                {
                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EducationalInstitutionID");

                    b.HasKey("AdminId", "Id");

                    b.HasIndex("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("EducationalInstitution.Domain.Models.EducationalInstitutionBuilding", b =>
                {
                    b.Property<string>("BuildingID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EducationalInstitutionID");

                    b.HasKey("BuildingID", "Id");

                    b.HasIndex("Id");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("EducationalInstitution.Domain.Models.Aggregates.EducationalInstitution", b =>
                {
                    b.HasOne("EducationalInstitution.Domain.Models.Aggregates.EducationalInstitution", "ParentInstitution")
                        .WithMany("ChildInstitutions")
                        .HasForeignKey("ParentInstitutionId");

                    b.OwnsOne("EducationalInstitution.Domain.Models.Access", "Access", b1 =>
                        {
                            b1.Property<Guid>("EducationalInstitutionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("DateForPermanentDeletion")
                                .HasColumnType("datetime2")
                                .HasColumnName("DateForPermanentDeletion");

                            b1.Property<bool>("IsDisabled")
                                .HasColumnType("bit")
                                .HasColumnName("IsDisabled");

                            b1.HasKey("EducationalInstitutionId");

                            b1.HasIndex("IsDisabled");

                            b1.ToTable("EducationalInstitutions");

                            b1.WithOwner()
                                .HasForeignKey("EducationalInstitutionId");
                        });

                    b.Navigation("Access");

                    b.Navigation("ParentInstitution");
                });

            modelBuilder.Entity("EducationalInstitution.Domain.Models.EducationalInstitutionAdmin", b =>
                {
                    b.HasOne("EducationalInstitution.Domain.Models.Aggregates.EducationalInstitution", "EducationalInstitution")
                        .WithMany("Admins")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EducationalInstitution.Domain.Models.Access", "Access", b1 =>
                        {
                            b1.Property<string>("EducationalInstitutionAdminAdminId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<Guid>("EducationalInstitutionAdminId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("DateForPermanentDeletion")
                                .HasColumnType("datetime2")
                                .HasColumnName("DateForPermanentDeletion");

                            b1.Property<bool>("IsDisabled")
                                .HasColumnType("bit")
                                .HasColumnName("IsDisabled");

                            b1.HasKey("EducationalInstitutionAdminAdminId", "EducationalInstitutionAdminId");

                            b1.HasIndex("IsDisabled");

                            b1.ToTable("Admins");

                            b1.WithOwner()
                                .HasForeignKey("EducationalInstitutionAdminAdminId", "EducationalInstitutionAdminId");
                        });

                    b.Navigation("Access");

                    b.Navigation("EducationalInstitution");
                });

            modelBuilder.Entity("EducationalInstitution.Domain.Models.EducationalInstitutionBuilding", b =>
                {
                    b.HasOne("EducationalInstitution.Domain.Models.Aggregates.EducationalInstitution", "EducationalInstitution")
                        .WithMany("Buildings")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EducationalInstitution.Domain.Models.Access", "Access", b1 =>
                        {
                            b1.Property<string>("EducationalInstitutionBuildingBuildingID")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<Guid>("EducationalInstitutionBuildingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("DateForPermanentDeletion")
                                .HasColumnType("datetime2")
                                .HasColumnName("DateForPermanentDeletion");

                            b1.Property<bool>("IsDisabled")
                                .HasColumnType("bit")
                                .HasColumnName("IsDisabled");

                            b1.HasKey("EducationalInstitutionBuildingBuildingID", "EducationalInstitutionBuildingId");

                            b1.HasIndex("IsDisabled");

                            b1.ToTable("Buildings");

                            b1.WithOwner()
                                .HasForeignKey("EducationalInstitutionBuildingBuildingID", "EducationalInstitutionBuildingId");
                        });

                    b.Navigation("Access");

                    b.Navigation("EducationalInstitution");
                });

            modelBuilder.Entity("EducationalInstitution.Domain.Models.Aggregates.EducationalInstitution", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Buildings");

                    b.Navigation("ChildInstitutions");
                });
#pragma warning restore 612, 618
        }
    }
}
*/