// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Notification.Infrastructure;

namespace Notification.Infrastructure.Migrations
{
    [DbContext(typeof(NotificationContext))]
    [Migration("20210922200756_RenamedEventUrlToUri")]
    partial class RenamedEventUrlToUri
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Notification.Domain.Models.Aggregates.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Message", "Uri");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Notification.Domain.Models.Recipient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.HasKey("Id", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("Recipients");
                });

            modelBuilder.Entity("Notification.Domain.Models.Aggregates.Event", b =>
                {
                    b.OwnsOne("Notification.Domain.Models.TriggerDetails", "TriggerDetails", b1 =>
                        {
                            b1.Property<string>("EventId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Action")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("TriggeredByAction");

                            b1.Property<string>("Issuer")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("Issuer");

                            b1.Property<DateTime>("TimeIssued")
                                .HasColumnType("datetime2")
                                .HasColumnName("TimeIssued");

                            b1.HasKey("EventId");

                            b1.HasIndex("Issuer", "TimeIssued", "Action");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.Navigation("TriggerDetails");
                });

            modelBuilder.Entity("Notification.Domain.Models.Recipient", b =>
                {
                    b.HasOne("Notification.Domain.Models.Aggregates.Event", "Event")
                        .WithMany("Recipients")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Notification.Domain.Models.Aggregates.Event", b =>
                {
                    b.Navigation("Recipients");
                });
#pragma warning restore 612, 618
        }
    }
}
